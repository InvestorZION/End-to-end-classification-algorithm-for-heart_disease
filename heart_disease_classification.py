# -*- coding: utf-8 -*-
"""Heart_disease Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19k3AldEAb5UNBbwpOSFrnMBwfR2n9Jij
"""

# Commented out IPython magic to ensure Python compatibility.
#import our tools for data analysis
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import math
# %matplotlib inline

#mount our drive because we're using colab
#load the data with pandas
df = pd.read_csv('drive/MyDrive/omo/heart-disease.csv')
df.head()

#check data info
df.info()

"""#  COLUMN DEFINITION
#age: The person’s age in years
#cp: chest pain type(Value 0: asymptomatic,Value 1: atypical angina,Value 2: non-anginal pain,Value 3: typical angina
#trestbps: The person’s resting blood pressure (mm Hg on admission to the hospital)
#chol: The person’s cholesterol measurement in mg/dl
#fbs: The person’s fasting blood sugar (> 120 mg/dl, 1 = true; 0 = false)
#restecg: resting electrocardiographic results,Value 0: showing probable or definite left ventricular hypertrophy by Estes’ criteria,Value 1: normal,Value 2: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV)
#thalach: The person’s maximum heart rate achieved
#exang: Exercise induced angina (1 = yes; 0 = no)
#oldpeak: ST depression induced by exercise relative to rest (‘ST’ relates to positions on the ECG plot. See more here)
#slope: the slope of the peak exercise ST segment — 0: downsloping; 1: flat; 2: upsloping
#0: downsloping; 1: flat; 2: upsloping
#ca: The number of major vessels (0–3)
#thal: A blood disorder called thalassemia Value 0: NULL (dropped from the dataset previously,Value 1: fixed defect (no blood flow in some part of the heart),Value 2: normal blood flow,Value 3: reversible defect (a blood flow is observed but it is not normal)
#target: Heart disease (1 = no, 0= yes)
"""

# Let's make an exploratory data analysis and find patterns 
#first make a copy of the data and keep the original for training purposes
df_tmp  = df.copy()

df_tmp.head()

df_tmp.describe()

# finding patterns between columns and making a plot with them
# still on EDA (Exploratory Data Analysis)
pd.crosstab(df_tmp.target,df_tmp.sex).plot(kind = "bar",color=('green','red'),figsize=(12,12))
plt.xlabel('0 = no_disease,1 = Dsease')
plt.ylabel("Amount")
plt.title('Heart Disease Frequency For sex')
plt.legend(['Female','Male'])
plt.xticks(rotation = 0);

pd.crosstab(df_tmp.target,df_tmp.exang).plot(kind = "bar",color=('blue','red'),figsize=(12,12));

pd.crosstab(df_tmp.target,df_tmp.cp).plot(kind = "bar",color=('green','red','blue','yellow'),figsize=(12,12));

# let's train a model
# import models 
# https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

x = df.drop('target',axis =1)
y = df.target

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size = 0.2,random_state = 42)

clf  =RandomForestClassifier(n_jobs = -1)

clf.fit(x_train,y_train)

y_pred_test = clf.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(y_test,y_pred_test)

from sklearn.metrics import classification_report

classification_report(y_test,y_pred_test)

# Model hyperparameter tuning to improve score
from sklearn.model_selection import RandomizedSearchCV

random_grid = {'n_estimators': [5,20,50,100],

'max_features':  ['auto', 'sqrt'],

'max_depth':[int(x) for x in np.linspace(10, 120, num = 12)],

'min_samples_split': [2, 6, 10],

'min_samples_leaf': [1, 3, 4],

'bootstrap': [True, False] }

rf_random = RandomizedSearchCV(estimator = clf,param_distributions = random_grid,
               n_iter = 100, cv = 5, verbose=2, random_state=42, n_jobs = -1)

rf_random.fit(x_train,y_train)

y_preds = rf_random.predict(x_test)

accuracy_score(y_test,y_preds)

# saving a trained model
import pickle

pickle.dump(rf_random, open('model.pkl', 'wb'))

#load the model again
pickled_model = pickle.load(open('model.pkl', 'rb'))

pickled_model.predict(x_test)

#End to end classification model on heart disease dataset

